services:
  backend:
    build:
      context: ./backend # Path to the backend's Dockerfile and source code
      dockerfile: Dockerfile
    ports:
      - "8001:8001" # Expose FastAPI on host port 8001, container port 8001
    volumes:
      # For development, mount the app code for live reloading.
      # For production, you'd typically copy the code in the Dockerfile and not use this volume.
      - ./backend/app:/app/app
      # Mount Alembic configuration and scripts for live updates/generation
      - ./backend/alembic.ini:/app/alembic.ini
      - ./backend/alembic:/app/alembic
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-mydatabase}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
    depends_on:
      #- db
      db: # Ensures 'db' service is started before 'backend'
        condition: service_healthy # Optional: wait for db to be healthy if healthcheck is defined
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend # Path to the frontend's Dockerfile and source code
      dockerfile: Dockerfile # Assumes your Dockerfile is named 'Dockerfile' in the ./frontend directory
    ports:
      - "8080:80" # Map host port 8080 to container port 80 (where Nginx listens)
    # No volumes needed for production build as files are copied into the Nginx image.
    # For development with Vite/Vue CLI dev server & HMR, you'd use a different setup:
    # command: pnpm run dev -- --host # Or 'npm run dev -- --host'
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules # Anonymous volume to isolate node_modules
    # ports:
    #   - "5173:5173" # Or whatever port your dev server uses
    environment:
      - NGINX_SERVER_NAME=localhost # Change to your domain or IP if needed
    depends_on:
      - backend # Optional: Ensures backend is started. Useful if frontend makes API calls at startup,
                # or if you want a specific startup order. For static SPAs, not strictly necessary for build.
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:17 # Using a specific version of Postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persistent data storage
    environment:
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_DB=${DB_NAME:-mydatabase}
    ports:
      # Expose PostgreSQL port to host for direct DB access during development (optional)
      # Be cautious with exposing DB ports in production environments.
      - "5432:5432" # Changed host port to 5432 to match default postgres, was 4320
    restart: unless-stopped
    networks:
      - app-network
    # Recommended: Add a healthcheck for the database for 'depends_on' condition
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-mydatabase}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: # Defines the named volume for persistent PostgreSQL data
    driver: local # Explicitly state driver (default is local)

networks:
  app-network: # Defines the bridge network for communication between services
    driver: bridge

# To use environment variables from a .env file, create a .env file in the same directory
# as this docker-compose.yml file (i.e., your project root) with content like:
# DB_USER=mydevuser
# DB_PASSWORD=mydevpassword
# DB_NAME=mydevdb
# OPENAI_API_KEY=your_openai_api_key
# SECRET_KEY=a_very_strong_local_secret_key_for_development
# ALGORITHM=HS256
# ACCESS_TOKEN_EXPIRE_MINUTES=60
# REFRESH_TOKEN_EXPIRE_DAYS=30
# NGINX_SERVER_NAME=localhost

