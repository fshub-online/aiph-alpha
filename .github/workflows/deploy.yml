name: Deploy to VPS

on:
  push:
    branches:
      - main # Or your release branch, e.g., 'release/*'
  # Or trigger on creating a release tag:
  # release:
  #   types: [published]

jobs:
  build_and_push_images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub (or GHCR)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # For GHCR:
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has package write permissions

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/aiph-backend:latest # For GHCR: ghcr.io/${{ github.repository_owner }}/my-app-backend:latest
          # You can use ${{ github.sha }} or a release tag for more specific versioning

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/aiph-frontend:latest # For GHCR: ghcr.io/${{ github.repository_owner }}/my-app-frontend:latest

  deploy_to_vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build_and_push_images # Ensure images are built and pushed first
    steps:
      - name: Checkout code # To get docker-compose.yml and .env template
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy to VPS
        run: |
          # Add VPS host to known_hosts to avoid interactive prompt
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          # Create .env file on VPS from secrets
          # IMPORTANT: Ensure proper escaping if your secrets contain special characters
          echo "Creating .env file on VPS"
          # assuming accessible directory existing on VPS as VPS_USER will not have write access to /opt
          # ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /opt/aiph && \
          
          # Create .env file on VPS from secrets
          echo "Creating .env file on VPS"
          # The here-document's content (with secrets expanded by the runner)
          # is piped as input to the ssh command, which then executes 'cat > /opt/aiph/.env' on the VPS.
          cat <<EOF | ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cat > /opt/aiph/.env'
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD='${{ secrets.DB_PASSWORD }}' # Quote if password has special chars
          DB_NAME=${{ secrets.DB_NAME }}
          # Add other production environment variables here
          # For Docker image names, ensure they match what you pushed:
          BACKEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/aiph-backend:latest
          FRONTEND_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/aiph-frontend:latest
          # For GHCR:
          # BACKEND_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/my-app-backend:latest
          # FRONTEND_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/my-app-frontend:latest
          EOF


          # Copy docker-compose.yml to VPS
          echo "Copying docker-compose.yml to VPS"
          scp ./docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/aiph/docker-compose.yml
          # Note: Using a separate docker-compose.prod.yml is good practice.
          # It would look like your local one but reference image names from the registry
          # and not have build contexts or local volume mounts for code.

          echo "Pulling new images and restarting services on VPS"
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd /opt/aiph && \
          source .env && sudo docker compose -f docker-compose.yml pull && \
          sudo docker compose -f docker-compose.yml up -d --remove-orphans && \
          sudo docker image prune -af' # Clean up dangling images