services:
  backend:
    # Use the image built and pushed by the CI/CD pipeline
    # The actual image name will be sourced from the .env file on the VPS
    image: ${BACKEND_IMAGE_NAME}
    ports:
      # Expose FastAPI on host port 8001, container port 8001
      # Adjust if you have a reverse proxy like Nginx or Traefik on the VPS
      # that will handle incoming traffic and route to this service.
      # If so, you might not need to expose this port to the host directly.
      - "8001:8001"
    environment:
      # DATABASE_URL will be sourced from the .env file on the VPS
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # Add any other production-specific backend environment variables here.
      # These can also be added to the .env file on the VPS.
      # Example:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY} 
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
    healthcheck:
      test: ["CMD-SHELL", "python", "/app/health_check.py"]
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be healthy before starting/running migrations
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    # Use the image built and pushed by the CI/CD pipeline
    # The actual image name will be sourced from the .env file on the VPS
    image: ${FRONTEND_IMAGE_NAME}
    ports:
      # Map host port 8080 to container port 80 (where Nginx inside the container listens)
      # Adjust if you have a reverse proxy on the VPS.
      # If a reverse proxy handles port 80/443, it would connect to this container
      # on port 80 over the app-network, and you might not expose this port to the host.
      - "8080:80"
    environment:
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME}
    depends_on:
      backend:
        condition: service_healthy # Optional: wait for backend to be healthy if healthcheck is defined
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:17 # Using a specific version of Postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persistent data storage
    environment:
      # These will be sourced from the .env file on the VPS
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    # It's generally safer NOT to expose the database port directly to the host in production.
    # Services within the Docker network can access it on port 5432.
    # If you need direct access from the host for maintenance, ensure your VPS firewall is configured.
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck: # Ensure DB is ready before migrations run
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5


volumes:
  postgres_data: # Defines the named volume for persistent PostgreSQL data
    driver: local # Explicitly state driver (default is local)

networks:
  app-network: # Defines the bridge network for communication between services
    driver: bridge

# The .env file on the VPS (created by your GitHub Action) will provide:
# DB_USER, DB_PASSWORD, DB_NAME, BACKEND_IMAGE_NAME, FRONTEND_IMAGE_NAME
# and any other secrets/configs you add there.
